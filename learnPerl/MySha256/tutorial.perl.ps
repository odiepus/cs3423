%!PS-Adobe-3.0
%%BoundingBox: 54 72 558 720
%%Creator: Mozilla (NetScape) HTML->PS
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 27
%%PageOrder: Ascend
%%Title: ftp://agora.leeds.ac.uk/scs/doc/whole-perl-tutorial.txt.gz
%%EndComments
%%BeginProlog
[ /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
 /two /three /four /five /six /seven /eight /nine /colon /semicolon
 /less /equal /greater /question /at /A /B /C /D /E
 /F /G /H /I /J /K /L /M /N /O
 /P /Q /R /S /T /U /V /W /X /Y
 /Z /bracketleft /backslash /bracketright /asciicircum /underscore /quoteleft /a /b /c
 /d /e /f /g /h /i /j /k /l /m
 /n /o /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /space /exclamdown /cent /sterling /currency /yen /brokenbar /section /dieresis /copyright
 /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf
 /threequarters /questiondown /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde
 /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
 /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
 /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave
 /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis] /isolatin1encoding exch def
/c { matrix currentmatrix currentpoint translate
     3 1 roll scale newpath 0 0 1 0 360 arc setmatrix } bind def
/F0
    /Times-Roman findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f0 { /F0 findfont exch scalefont setfont } bind def
/F1
    /Times-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f1 { /F1 findfont exch scalefont setfont } bind def
/F2
    /Times-Italic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f2 { /F2 findfont exch scalefont setfont } bind def
/F3
    /Times-BoldItalic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f3 { /F3 findfont exch scalefont setfont } bind def
/F4
    /Courier findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f4 { /F4 findfont exch scalefont setfont } bind def
/F5
    /Courier-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f5 { /F5 findfont exch scalefont setfont } bind def
/F6
    /Courier-Oblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f6 { /F6 findfont exch scalefont setfont } bind def
/F7
    /Courier-BoldOblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f7 { /F7 findfont exch scalefont setfont } bind def
/rhc {
    {
        currentfile read {
	    dup 97 ge
		{ 87 sub true exit }
		{ dup 48 ge { 48 sub true exit } { pop } ifelse }
	    ifelse
	} {
	    false
	    exit
	} ifelse
    } loop
} bind def

/cvgray { % xtra_char npix cvgray - (string npix long)
    dup string
    0
    {
	rhc { cvr 4.784 mul } { exit } ifelse
	rhc { cvr 9.392 mul } { exit } ifelse
	rhc { cvr 1.824 mul } { exit } ifelse
	add add cvi 3 copy put pop
	1 add
	dup 3 index ge { exit } if
    } loop
    pop
    3 -1 roll 0 ne { rhc { pop } if } if
    exch pop
} bind def

/smartimage12rgb { % w h b [matrix] smartimage12rgb -
    /colorimage where {
	pop
	{ currentfile rowdata readhexstring pop }
	false 3
	colorimage
    } {
	exch pop 8 exch
	3 index 12 mul 8 mod 0 ne { 1 } { 0 } ifelse
	4 index
	6 2 roll
	{ 2 copy cvgray }
	image
	pop pop
    } ifelse
} def
/cshow { dup stringwidth pop 2 div neg 0 rmoveto show } bind def
/rshow { dup stringwidth pop neg 0 rmoveto show } bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(----- boundary begin -----) show
0 701.4 moveto
10 f4
(Thu Jun 15 18:12:51 BST 1995) show
0 680.4 moveto
10 f4
(This file is compiled automatically from the URLs listed below. Between) show
0 669.9 moveto
10 f4
(each page is the line containing only '----- boundary ' followed by the URL) show
0 659.4 moveto
10 f4
(of the next page or 'begin' or 'end' followed by ' -----'. The URLs are:) show
0 638.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/start.html) show
0 627.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/basic.html) show
0 617.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/running.html) show
0 606.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/scalars.html) show
0 596.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/arrays.html) show
0 585.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/filehandling.html) show
0 575.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/control.html) show
0 564.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/conditionals.html) show
0 554.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/matching.html) show
0 543.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/sandtr.html) show
0 533.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/split.html) show
0 522.9 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/associative.html) show
0 512.4 moveto
10 f4
(        http://agora.leeds.ac.uk/nik/Perl/subroutines.html) show
0 491.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/start.html -----) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(     _________________________________________________________________) show
0 449.4 moveto
10 f4
(   ) show
0 438.9 moveto
10 f4
(                             PERL TUTORIAL: START) show
0 428.4 moveto
10 f4
(                                       ) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(     _________________________________________________________________) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(   ) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(   This is the start of a tutorial on Perl, originally run by me, Nik) show
0 354.9 moveto
10 f4
(   Silver, as the first part of a one-day hands-on workshop at the School) show
0 344.4 moveto
10 f4
(   of Computer Studies, University of Leeds, in the UK. The second part) show
0 333.9 moveto
10 f4
(   of the workshop looked at designing pages for the World Wide Web using) show
0 323.4 moveto
10 f4
(   Perl to deal with buttons and text boxes to generate custom Web pages) show
0 312.9 moveto
10 f4
(   on the fly. Creating a Web page without all these things is a much) show
0 302.4 moveto
10 f4
(   easier task. There is information about how to do this at Leeds but) show
0 291.9 moveto
10 f4
(   otherwise you should look at NCSA's definitive Beginner's Guide to) show
0 281.4 moveto
10 f4
(   HTML.) show
0 270.9 moveto
10 f4
(   ) show
0 260.4 moveto
10 f4
(   There are plenty of other Perl tutorials around, and most \(if not all\)) show
0 249.9 moveto
10 f4
(   of them can be found at the UF/NA Perl Archive. However I wanted) show
0 239.4 moveto
10 f4
(   something that included exercises developing a consistent theme; none) show
0 228.9 moveto
10 f4
(   of the others seemed to do this.) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(   This tutorial assumes a very basic knowledge of UNIX and concentrates) show
0 197.4 moveto
10 f4
(   on how to write basic working perl programs. It does not explain why) show
0 186.9 moveto
10 f4
(   many things are as they are, nor does it draw generalisations about) show
0 176.4 moveto
10 f4
(   the language; it is assumed that the reader can make most of these) show
0 165.9 moveto
10 f4
(   inferences correctly for themselves. You can find more information on) show
0 155.4 moveto
10 f4
(   those topics elsewhere \(see above\).) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(   Thanks to Neil Bowers whose Perl page is where I ripped off the camel) show
0 123.9 moveto
10 f4
(   icon \(though he ripped it off someone before me, of course\) and to our) show
0 113.4 moveto
10 f4
(   Support team for their technical wizardry.) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   The structure of this tutorial is as follows:) show
0 81.9 moveto
10 f4
(     * A basic perl program) show
pagelevel restore
showpage
%%Page: 2 2
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(          + The first line) show
0 701.4 moveto
10 f4
(          + Comments and statements) show
0 690.9 moveto
10 f4
(          + Simple printing) show
0 680.4 moveto
10 f4
(     * Running the program) show
0 669.9 moveto
10 f4
(     * Scalar variables) show
0 659.4 moveto
10 f4
(          + Operations and assignment) show
0 648.9 moveto
10 f4
(          + Interpolation) show
0 638.4 moveto
10 f4
(          + Exercise) show
0 627.9 moveto
10 f4
(     * Array variables) show
0 617.4 moveto
10 f4
(          + Array assignments) show
0 606.9 moveto
10 f4
(          + Displaying arrays) show
0 596.4 moveto
10 f4
(          + Exercise) show
0 585.9 moveto
10 f4
(     * Filehandling) show
0 575.4 moveto
10 f4
(          + Exercise) show
0 564.9 moveto
10 f4
(     * Control structures) show
0 554.4 moveto
10 f4
(          + foreach) show
0 543.9 moveto
10 f4
(          + Testing) show
0 533.4 moveto
10 f4
(          + for) show
0 522.9 moveto
10 f4
(          + while and until) show
0 512.4 moveto
10 f4
(          + Exercise) show
0 501.9 moveto
10 f4
(     * Conditionals) show
0 491.4 moveto
10 f4
(          + Exercise) show
0 480.9 moveto
10 f4
(     * String matching) show
0 470.4 moveto
10 f4
(          + Regular expressions) show
0 459.9 moveto
10 f4
(          + The $_ special variable) show
0 449.4 moveto
10 f4
(          + More on REs) show
0 438.9 moveto
10 f4
(          + Some example REs) show
0 428.4 moveto
10 f4
(          + Exercise) show
0 417.9 moveto
10 f4
(     * Substitution and translation) show
0 407.4 moveto
10 f4
(          + Options) show
0 396.9 moveto
10 f4
(          + Remembering patterns) show
0 386.4 moveto
10 f4
(          + Translation) show
0 375.9 moveto
10 f4
(          + Exercise) show
0 365.4 moveto
10 f4
(     * Split) show
0 354.9 moveto
10 f4
(          + Exercise) show
0 344.4 moveto
10 f4
(     * Associative arrays) show
0 333.9 moveto
10 f4
(          + Operators) show
0 323.4 moveto
10 f4
(          + Environment variables) show
0 312.9 moveto
10 f4
(     * Subroutines) show
0 302.4 moveto
10 f4
(          + Parameters) show
0 291.9 moveto
10 f4
(          + Returning values) show
0 281.4 moveto
10 f4
(          + Local variables) show
0 270.9 moveto
10 f4
(            ) show
0 260.4 moveto
10 f4
(   ) show
0 249.9 moveto
10 f4
(   ) show
0 239.4 moveto
10 f4
(   ) show
0 228.9 moveto
10 f4
(     _________________________________________________________________) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(   Home) show
0 197.4 moveto
10 f4
(     _________________________________________________________________) show
0 186.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/basic.html -----) show
0 165.9 moveto
10 f4
(   ) show
0 155.4 moveto
10 f4
(     _________________________________________________________________) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(                        PERL TUTORIAL: A BASIC PROGRAM) show
0 123.9 moveto
10 f4
(                                       ) show
0 113.4 moveto
10 f4
(   ) show
0 102.9 moveto
10 f4
(     _________________________________________________________________) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(   ) show
pagelevel restore
showpage
%%Page: 3 3
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   Here is the basic perl program that we'll use to get started.) show
0 680.4 moveto
10 f4
(#!/usr/local/bin/perl) show
0 669.9 moveto
10 f4
(#) show
0 659.4 moveto
10 f4
(# Program to do the obvious) show
0 648.9 moveto
10 f4
(#) show
0 638.4 moveto
10 f4
(print 'Hello world.';           # Print a message) show
0 617.4 moveto
10 f4
(   Each of the parts will be discussed in turn.) show
0 606.9 moveto
10 f4
(   ) show
0 596.4 moveto
10 f4
(   ) show
0 585.9 moveto
10 f4
(     _________________________________________________________________) show
0 575.4 moveto
10 f4
(   ) show
0 564.9 moveto
10 f4
(The first line) show
0 543.9 moveto
10 f4
(   Every perl program starts off with this as its very first line:) show
0 522.9 moveto
10 f4
(#!/usr/local/bin/perl) show
0 501.9 moveto
10 f4
(   although this may vary from system to system. This line tells the) show
0 491.4 moveto
10 f4
(   machine what to do with the file when it is executed \(ie it tells it) show
0 480.9 moveto
10 f4
(   to run the file through Perl\).) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(     _________________________________________________________________) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(Comments and statements) show
0 407.4 moveto
10 f4
(   Comments can be inserted into a program with the # symbol, and) show
0 396.9 moveto
10 f4
(   anything from the # to the end of the line is ignored \(with the) show
0 386.4 moveto
10 f4
(   exception of the first line\). The only way to stretch comments over) show
0 375.9 moveto
10 f4
(   several lines is to use a # on each line.) show
0 365.4 moveto
10 f4
(   ) show
0 354.9 moveto
10 f4
(   Everything else is a Perl statement which must end with a semicolon,) show
0 344.4 moveto
10 f4
(   like the last line above.) show
0 333.9 moveto
10 f4
(   ) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(     _________________________________________________________________) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(Simple printing) show
0 270.9 moveto
10 f4
(   The print function outputs some information. In the above case it) show
0 260.4 moveto
10 f4
(   prints out the the literal string Hello world. and of course the) show
0 249.9 moveto
10 f4
(   statement ends with a semicolon.) show
0 239.4 moveto
10 f4
(   ) show
0 228.9 moveto
10 f4
(   You may find the above program produces an slightly unexpected result.) show
0 218.4 moveto
10 f4
(   So the next thing to do is to run it.) show
0 207.9 moveto
10 f4
(     _________________________________________________________________) show
0 197.4 moveto
10 f4
(   ) show
0 186.9 moveto
10 f4
(   Start Next ) show
0 176.4 moveto
10 f4
(     _________________________________________________________________) show
0 165.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/running.html -----) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(     _________________________________________________________________) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(                              RUNNING THE PROGRAM) show
0 102.9 moveto
10 f4
(                                       ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(     _________________________________________________________________) show
pagelevel restore
showpage
%%Page: 4 4
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   ) show
0 690.9 moveto
10 f4
(   ) show
0 680.4 moveto
10 f4
(   Type in the example program using a text editor, and save it. Emacs is) show
0 669.9 moveto
10 f4
(   a good editor to use for this because it has its own Perl mode which) show
0 659.4 moveto
10 f4
(   formats lines nicely when you hit tab \(use `M-x perl-mode'\). But as) show
0 648.9 moveto
10 f4
(   ever, use whichever you're most comfortable with.) show
0 638.4 moveto
10 f4
(   ) show
0 627.9 moveto
10 f4
(   After you've entered and saved the program make sure the file is) show
0 617.4 moveto
10 f4
(   executable by using the command) show
0 596.4 moveto
10 f4
(chmod u+x progname) show
0 575.4 moveto
10 f4
(   at the UNIX prompt, where progname is the filename of the program. Now) show
0 564.9 moveto
10 f4
(   to run the program just type any of the following at the prompt.) show
0 543.9 moveto
10 f4
(perl progname) show
0 533.4 moveto
10 f4
(./progname) show
0 522.9 moveto
10 f4
(progname) show
0 501.9 moveto
10 f4
(   ) show
0 491.4 moveto
10 f4
(   ) show
0 480.9 moveto
10 f4
(   If something goes wrong then you may get error messages, or you may) show
0 470.4 moveto
10 f4
(   get nothing. You can always run the program with warnings using the) show
0 459.9 moveto
10 f4
(   command) show
0 438.9 moveto
10 f4
(perl -w progname) show
0 417.9 moveto
10 f4
(   at the prompt. This will display warnings and other \(hopefully\)) show
0 407.4 moveto
10 f4
(   helpful messages before it tries to execute the program. To run the) show
0 396.9 moveto
10 f4
(   program with a debugger use the command) show
0 375.9 moveto
10 f4
(perl -d progname) show
0 354.9 moveto
10 f4
(   ) show
0 344.4 moveto
10 f4
(   ) show
0 333.9 moveto
10 f4
(   When the file is executed Perl first compiles it and then executes) show
0 323.4 moveto
10 f4
(   that compiled version. So after a short pause for compilation the) show
0 312.9 moveto
10 f4
(   program should run quite quickly. This also explains why you can get) show
0 302.4 moveto
10 f4
(   compilation errors when you execute a Perl file which consists only of) show
0 291.9 moveto
10 f4
(   text.) show
0 281.4 moveto
10 f4
(   ) show
0 270.9 moveto
10 f4
(   Make sure your program works before proceeding. The program's output) show
0 260.4 moveto
10 f4
(   may be slightly unexpected - at least it isn't very pretty. We'll look) show
0 249.9 moveto
10 f4
(   next at variables and then tie this in with prettier printing.) show
0 239.4 moveto
10 f4
(     _________________________________________________________________) show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(   Previous Start Next ) show
0 207.9 moveto
10 f4
(     _________________________________________________________________) show
0 197.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/scalars.html -----) show
0 176.4 moveto
10 f4
(   ) show
0 165.9 moveto
10 f4
(     _________________________________________________________________) show
0 155.4 moveto
10 f4
(   ) show
0 144.9 moveto
10 f4
(                               SCALAR VARIABLES) show
0 134.4 moveto
10 f4
(                                       ) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(     _________________________________________________________________) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(   ) show
pagelevel restore
showpage
%%Page: 5 5
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   The most basic kind of variable in Perl is the scalar variable. Scalar) show
0 701.4 moveto
10 f4
(   variables hold both strings and numbers, and are remarkable in that) show
0 690.9 moveto
10 f4
(   strings and numbers are completely interchangable. For example, the) show
0 680.4 moveto
10 f4
(   statement) show
0 659.4 moveto
10 f4
($priority = 9;) show
0 638.4 moveto
10 f4
(   sets the scalar variable $priority to 9, but you can also assign a) show
0 627.9 moveto
10 f4
(   string to exactly the same variable:) show
0 606.9 moveto
10 f4
($priority = 'high';) show
0 585.9 moveto
10 f4
(   Perl also accepts numbers as strings, like this:) show
0 564.9 moveto
10 f4
($priority = '9';) show
0 554.4 moveto
10 f4
($default = '0009';) show
0 533.4 moveto
10 f4
(   and can still cope with arithmetic and other operations quite happily.) show
0 522.9 moveto
10 f4
(   ) show
0 512.4 moveto
10 f4
(   ) show
0 501.9 moveto
10 f4
(   In general variable names consists of numbers, letters and) show
0 491.4 moveto
10 f4
(   underscores, but they should not start with a number and the variable) show
0 480.9 moveto
10 f4
(   $_ is special, as we'll see later. Also, Perl is case sensitive, so) show
0 470.4 moveto
10 f4
(   $a and $A are different.) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(   ) show
0 438.9 moveto
10 f4
(     _________________________________________________________________) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(Operations and Assignment) show
0 396.9 moveto
10 f4
(   Perl uses all the usual C arithmetic operators:) show
0 375.9 moveto
10 f4
($a = 1 + 2;     # Add 1 and 2 and store in $a) show
0 365.4 moveto
10 f4
($a = 3 - 4;     # Subtract 4 from 3 and store in $a) show
0 354.9 moveto
10 f4
($a = 5 * 6;     # Multiply 5 and 6) show
0 344.4 moveto
10 f4
($a = 7 / 8;     # Divide 7 by 8 to give 0.875) show
0 333.9 moveto
10 f4
($a = 9 ** 10;   # Nine to the power of 10) show
0 323.4 moveto
10 f4
($a = 5 % 2;     # Remainder of 5 divided by 2) show
0 312.9 moveto
10 f4
(++$a;           # Increment $a and then return it) show
0 302.4 moveto
10 f4
($a++;           # Return $a and then increment it) show
0 291.9 moveto
10 f4
(--$a;           # Decrement $a and then return it) show
0 281.4 moveto
10 f4
($a--;           # Return $a and then decrement it) show
0 260.4 moveto
10 f4
(   and for strings Perl has the following among others:) show
0 239.4 moveto
10 f4
($a = $b . $c;   # Concatenate $b and $c) show
0 228.9 moveto
10 f4
($a = $b x $c;   # $b repeated $c times) show
0 207.9 moveto
10 f4
(   To assign values Perl includes) show
0 186.9 moveto
10 f4
($a = $b;        # Assign $b to $a) show
0 176.4 moveto
10 f4
($a += $b;       # Add $b to $a) show
0 165.9 moveto
10 f4
($a -= $b;       # Subtract $b from $a) show
0 155.4 moveto
10 f4
($a .= $b;       # Append $b onto $a) show
0 134.4 moveto
10 f4
(   Note that when Perl assigns a value with $a = $b it makes a copy of $b) show
0 123.9 moveto
10 f4
(   and then assigns that to $a. Therefore the next time you change $b it) show
0 113.4 moveto
10 f4
(   will not alter $a.) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   Other operators can be found on the perlop manual page. Type man) show
0 81.9 moveto
10 f4
(   perlop at the prompt.) show
pagelevel restore
showpage
%%Page: 6 6
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   ) show
0 690.9 moveto
10 f4
(     _________________________________________________________________) show
0 680.4 moveto
10 f4
(   ) show
0 669.9 moveto
10 f4
(Interpolation) show
0 648.9 moveto
10 f4
(   The following code prints apples and pears using concatenation:) show
0 627.9 moveto
10 f4
($a = 'apples';) show
0 617.4 moveto
10 f4
($b = 'pears';) show
0 606.9 moveto
10 f4
(print $a.' and '.$b;) show
0 585.9 moveto
10 f4
(   It would be nicer to include only one string in the final print) show
0 575.4 moveto
10 f4
(   statement, but the line) show
0 554.4 moveto
10 f4
(print '$a and $b';) show
0 533.4 moveto
10 f4
(   prints literally $a and $b which isn't very helpful. Instead we can) show
0 522.9 moveto
10 f4
(   use the double quotes in place of the single quotes:) show
0 501.9 moveto
10 f4
(print "$a and $b";) show
0 480.9 moveto
10 f4
(   The double quotes force interpolation of any codes, including) show
0 470.4 moveto
10 f4
(   interpreting variables. This is a much nicer than our original) show
0 459.9 moveto
10 f4
(   statement. Other codes that are interpolated include special) show
0 449.4 moveto
10 f4
(   characters such as newline and tab. The code \\n is a newline and \\t is) show
0 438.9 moveto
10 f4
(   a tab.) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(     _________________________________________________________________) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(Exercise) show
0 365.4 moveto
10 f4
(   This exercise is to rewrite the Hello world program so that \(a\) the) show
0 354.9 moveto
10 f4
(   string is assigned to a variable and \(b\) this variable is then printed) show
0 344.4 moveto
10 f4
(   with a newline character. Use the double quotes and don't use the) show
0 333.9 moveto
10 f4
(   concatenation operator. Make sure you can get this to work before) show
0 323.4 moveto
10 f4
(   proceeding.) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(     _________________________________________________________________) show
0 281.4 moveto
10 f4
(   ) show
0 270.9 moveto
10 f4
(   Previous Start Next ) show
0 260.4 moveto
10 f4
(     _________________________________________________________________) show
0 249.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/arrays.html -----) show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(     _________________________________________________________________) show
0 207.9 moveto
10 f4
(   ) show
0 197.4 moveto
10 f4
(                                ARRAY VARIABLES) show
0 186.9 moveto
10 f4
(                                       ) show
0 176.4 moveto
10 f4
(   ) show
0 165.9 moveto
10 f4
(     _________________________________________________________________) show
0 155.4 moveto
10 f4
(   ) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(   ) show
0 123.9 moveto
10 f4
(   A slightly more interesting kind of variable is the array variable) show
0 113.4 moveto
10 f4
(   which is a list of scalars \(ie numbers and strings\). Array variables) show
0 102.9 moveto
10 f4
(   have the same format as scalar variables except that they are prefixed) show
0 92.4 moveto
10 f4
(   by an @ symbol. The statement) show
pagelevel restore
showpage
%%Page: 7 7
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(@food  = \("apples", "pears", "eels"\);) show
0 701.4 moveto
10 f4
(@music = \("whistle", "flute"\);) show
0 680.4 moveto
10 f4
(   assigns a three element list to the array variable @food and a two) show
0 669.9 moveto
10 f4
(   element list to the array variable @music.) show
0 659.4 moveto
10 f4
(   ) show
0 648.9 moveto
10 f4
(   The array is accessed by using indices starting from 0, and square) show
0 638.4 moveto
10 f4
(   brackets are used to specify the index. The expression) show
0 617.4 moveto
10 f4
($food[2]) show
0 596.4 moveto
10 f4
(   returns eels. Notice that the @ has changed to a $ because eels is a) show
0 585.9 moveto
10 f4
(   scalar.) show
0 575.4 moveto
10 f4
(   ) show
0 564.9 moveto
10 f4
(   ) show
0 554.4 moveto
10 f4
(     _________________________________________________________________) show
0 543.9 moveto
10 f4
(   ) show
0 533.4 moveto
10 f4
(Array assignments) show
0 512.4 moveto
10 f4
(   As in all of Perl, the same expression in a different context can) show
0 501.9 moveto
10 f4
(   produce a different result. The first assignment below explodes the) show
0 491.4 moveto
10 f4
(   @music variable so that it is equivalent to the second assignment.) show
0 470.4 moveto
10 f4
(@moremusic = \("organ", @music, "harp"\);) show
0 459.9 moveto
10 f4
(@moremusic = \("organ", "whistle", "flute", "harp"\);) show
0 438.9 moveto
10 f4
(   This should suggest a way of adding elements to an array. A neater way) show
0 428.4 moveto
10 f4
(   of adding elements is to use the statement) show
0 407.4 moveto
10 f4
(push\(@food, "eggs"\);) show
0 386.4 moveto
10 f4
(   which pushes eggs onto the end of the array @food. To push two or more) show
0 375.9 moveto
10 f4
(   items onto the array use one of the following forms:) show
0 354.9 moveto
10 f4
(push\(@food, "eggs", "lard"\);) show
0 344.4 moveto
10 f4
(push\(@food, \("eggs", "lard"\)\);) show
0 333.9 moveto
10 f4
(push\(@food, @morefood\);) show
0 312.9 moveto
10 f4
(   The push function returns the length of the new list.) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(   To remove the last item from a list and return it use the pop) show
0 281.4 moveto
10 f4
(   function. From our original list the pop function returns eels and) show
0 270.9 moveto
10 f4
(   @food now has two elements:) show
0 249.9 moveto
10 f4
($grub = pop\(@food\);     # Now $grub = "eels") show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(   It is also possible to assign an array to a scalar variable. As usual) show
0 197.4 moveto
10 f4
(   context is important. The line) show
0 176.4 moveto
10 f4
($f = @food;) show
0 155.4 moveto
10 f4
(   assigns the length of @food, but) show
0 134.4 moveto
10 f4
($f = "@food";) show
0 113.4 moveto
10 f4
(   turns the list into a string with a space between each element. This) show
0 102.9 moveto
10 f4
(   space can be replaced by any other string by changing the value of the) show
0 92.4 moveto
10 f4
(   special $" variable. This variable is just one of Perl's many special) show
0 81.9 moveto
10 f4
(   variables, most of which have odd names.) show
pagelevel restore
showpage
%%Page: 8 8
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   Arrays can also be used to make multiple assignments to scalar) show
0 690.9 moveto
10 f4
(   variables:) show
0 669.9 moveto
10 f4
(\($a, $b\) = \($c, $d\);            # Same as $a=$c; $b=$d;) show
0 659.4 moveto
10 f4
(\($a, $b\) = @food;               # $a and $b are the first two) show
0 648.9 moveto
10 f4
(                                # items of @food.) show
0 638.4 moveto
10 f4
(\($a, @somefood\) = @food;        # $a is the first item of @food) show
0 627.9 moveto
10 f4
(                                # @somefood is a list of the) show
0 617.4 moveto
10 f4
(                                # others.) show
0 606.9 moveto
10 f4
(\(@somefood, $a\) = @food;        # @somefood is @food and) show
0 596.4 moveto
10 f4
(                                # $a is undefined.) show
0 575.4 moveto
10 f4
(   The last assignment occurs because arrays are greedy, and @somefood) show
0 564.9 moveto
10 f4
(   will swallow up as much of @food as it can. Therefore that form is) show
0 554.4 moveto
10 f4
(   best avoided.) show
0 543.9 moveto
10 f4
(   ) show
0 533.4 moveto
10 f4
(   Finally, you may want to find the index of the last element of a list.) show
0 522.9 moveto
10 f4
(   To do this for the @food array use the expression) show
0 501.9 moveto
10 f4
($#food) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(     _________________________________________________________________) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(Displaying arrays) show
0 407.4 moveto
10 f4
(   Since context is important, it shouldn't be too surprising that the) show
0 396.9 moveto
10 f4
(   following all produce different results:) show
0 375.9 moveto
10 f4
(print @food;    # By itself) show
0 365.4 moveto
10 f4
(print "@food";  # Embedded in double quotes) show
0 354.9 moveto
10 f4
(print @food.""; # In a scalar context) show
0 333.9 moveto
10 f4
(   ) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(     _________________________________________________________________) show
0 291.9 moveto
10 f4
(   ) show
0 281.4 moveto
10 f4
(Exercise) show
0 260.4 moveto
10 f4
(   Try out each of the above three print statements to see what they do.) show
0 249.9 moveto
10 f4
(   ) show
0 239.4 moveto
10 f4
(   ) show
0 228.9 moveto
10 f4
(     _________________________________________________________________) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(   Previous Start Next ) show
0 197.4 moveto
10 f4
(     _________________________________________________________________) show
0 186.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/filehandling.html -----) show
0 165.9 moveto
10 f4
(   ) show
0 155.4 moveto
10 f4
(     _________________________________________________________________) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(                                 FILE HANDLING) show
0 123.9 moveto
10 f4
(                                       ) show
0 113.4 moveto
10 f4
(   ) show
0 102.9 moveto
10 f4
(     _________________________________________________________________) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(   ) show
pagelevel restore
showpage
%%Page: 9 9
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   Here is the basic perl program which does the same as the UNIX cat) show
0 690.9 moveto
10 f4
(   command on a certain file.) show
0 669.9 moveto
10 f4
(#!/usr/local/bin/perl) show
0 659.4 moveto
10 f4
(#) show
0 648.9 moveto
10 f4
(# Program to open the password file, read it in,) show
0 638.4 moveto
10 f4
(# print it, and close it again.) show
0 617.4 moveto
10 f4
($file = '/etc/passwd';          # Name the file) show
0 606.9 moveto
10 f4
(open\(INFO, $file\);              # Open the file) show
0 596.4 moveto
10 f4
(@lines = <INFO>;                # Read it into an array) show
0 585.9 moveto
10 f4
(close\(INFO\);                    # Close the file) show
0 575.4 moveto
10 f4
(print @lines;                   # Print the array) show
0 554.4 moveto
10 f4
(   ) show
0 543.9 moveto
10 f4
(   ) show
0 533.4 moveto
10 f4
(   The open function opens a file for input \(i.e. for reading\). The first) show
0 522.9 moveto
10 f4
(   parameter is the filehandle which allows Perl to refer to the file in) show
0 512.4 moveto
10 f4
(   future. The second parameter is an expression denoting the filename.) show
0 501.9 moveto
10 f4
(   If the filename was given in quotes then it is taken literally without) show
0 491.4 moveto
10 f4
(   shell expansion. So the expression '~/notes/todolist' will not be) show
0 480.9 moveto
10 f4
(   interpreted successfully. If you want to force shell expansion then) show
0 470.4 moveto
10 f4
(   use angled brackets: that is, use <~/notes/todolist> instead.) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(   The close function tells Perl to finish with that file.) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(   There are a few useful points to add to this discussion on) show
0 417.9 moveto
10 f4
(   filehandling. First, the open statement can also specify a file for) show
0 407.4 moveto
10 f4
(   output and for appending as well as for input. To do this, prefix the) show
0 396.9 moveto
10 f4
(   filename with a > for output and a >> for appending:) show
0 375.9 moveto
10 f4
(open\(INFO, $file\);      # Open for input) show
0 365.4 moveto
10 f4
(open\(INFO, ">$file"\);   # Open for output) show
0 354.9 moveto
10 f4
(open\(INFO, ">>$file"\);  # Open for appending) show
0 344.4 moveto
10 f4
(open\(INFO, "<$file"\);   # Also open for input) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(   Second, if you want to print something to a file you've already opened) show
0 291.9 moveto
10 f4
(   for output then you can use the print statement with an extra) show
0 281.4 moveto
10 f4
(   parameter. To print a string to the file with the INFO filehandle use) show
0 260.4 moveto
10 f4
(print INFO "This line goes to the file.\\n";) show
0 239.4 moveto
10 f4
(   ) show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(   Third, you can use the following to open the standard input \(usually) show
0 207.9 moveto
10 f4
(   the keyboard\) and standard output \(usually the screen\) respectively:) show
0 186.9 moveto
10 f4
(open\(INFO, '-'\);        # Open standard input) show
0 176.4 moveto
10 f4
(open\(INFO, '>-'\);       # Open standard output) show
0 155.4 moveto
10 f4
(   In the above program the information is read from a file. The file is) show
0 144.9 moveto
10 f4
(   the INFO file and to read from it Perl uses angled brackets. So the) show
0 134.4 moveto
10 f4
(   statement) show
0 113.4 moveto
10 f4
(@lines = <INFO>;) show
0 92.4 moveto
10 f4
(   reads the file denoted by the filehandle into the array @lines. Note) show
0 81.9 moveto
10 f4
(   that the <INFO> expression reads in the file entirely in one go. This) show
pagelevel restore
showpage
%%Page: 10 10
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   because the reading takes place in the context of an array variable.) show
0 701.4 moveto
10 f4
(   If @lines is replaced by the scalar $lines then only the next one line) show
0 690.9 moveto
10 f4
(   would be read in. In either case each line is stored complete with its) show
0 680.4 moveto
10 f4
(   newline character at the end.) show
0 669.9 moveto
10 f4
(   ) show
0 659.4 moveto
10 f4
(   ) show
0 648.9 moveto
10 f4
(     _________________________________________________________________) show
0 638.4 moveto
10 f4
(   ) show
0 627.9 moveto
10 f4
(Exercise) show
0 606.9 moveto
10 f4
(   Modify the above program so that the entire file is printed with a #) show
0 596.4 moveto
10 f4
(   symbol at the beginning of each line. You should only have to add one) show
0 585.9 moveto
10 f4
(   line and modify another. Use the $" variable. Unexpected things can) show
0 575.4 moveto
10 f4
(   happen with files, so you may find it helpful to use the -w option as) show
0 564.9 moveto
10 f4
(   mentioned in the section on running Perl programs.) show
0 554.4 moveto
10 f4
(   ) show
0 543.9 moveto
10 f4
(   ) show
0 533.4 moveto
10 f4
(     _________________________________________________________________) show
0 522.9 moveto
10 f4
(   ) show
0 512.4 moveto
10 f4
(   Previous Start Next ) show
0 501.9 moveto
10 f4
(     _________________________________________________________________) show
0 491.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/control.html -----) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(     _________________________________________________________________) show
0 449.4 moveto
10 f4
(   ) show
0 438.9 moveto
10 f4
(                              CONTROL STRUCTURES) show
0 428.4 moveto
10 f4
(                                       ) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(     _________________________________________________________________) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(   ) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(   More interesting possiblities arise when we introduce control) show
0 354.9 moveto
10 f4
(   structures and looping. Perl supports lots of different kinds of) show
0 344.4 moveto
10 f4
(   control structures which tend to be like those in C, but are very) show
0 333.9 moveto
10 f4
(   similar to Pascal, too. Here we discuss a few of them.) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(     _________________________________________________________________) show
0 291.9 moveto
10 f4
(   ) show
0 281.4 moveto
10 f4
(foreach) show
0 260.4 moveto
10 f4
(   To go through each line of an array or other list-like structure \(such) show
0 249.9 moveto
10 f4
(   as lines in a file\) Perl uses the foreach structure. This has the form) show
0 228.9 moveto
10 f4
(foreach $morsel \(@food\)         # Visit each item in turn) show
0 218.4 moveto
10 f4
(                                # and call it $morsel) show
0 207.9 moveto
10 f4
({) show
0 197.4 moveto
10 f4
(        print "$morsel\\n";      # Print the item) show
0 186.9 moveto
10 f4
(        print "Yum yum\\n";      # That was nice) show
0 176.4 moveto
10 f4
(}) show
0 155.4 moveto
10 f4
(   The actions to be performed each time are enclosed in a block of curly) show
0 144.9 moveto
10 f4
(   braces. The first time through the block $morsel is assigned the value) show
0 134.4 moveto
10 f4
(   of the first item in the array @food. Next time it is assigned the) show
0 123.9 moveto
10 f4
(   value of the second item, and so until the end. If @food is empty to) show
0 113.4 moveto
10 f4
(   start with then the block of statements is never executed.) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(     _________________________________________________________________) show
pagelevel restore
showpage
%%Page: 11 11
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(Testing) show
0 680.4 moveto
10 f4
(   The next few structures rely on a test being true or false. In Perl) show
0 669.9 moveto
10 f4
(   any non-zero number and non-empty string is counted as true. The) show
0 659.4 moveto
10 f4
(   number zero, zero by itself in a string, and the empty string are) show
0 648.9 moveto
10 f4
(   counted as false. Here are some tests on numbers and strings.) show
0 627.9 moveto
10 f4
($a == $b                # Is $a numerically equal to $b?) show
0 617.4 moveto
10 f4
(                        # Beware: Don't use the = operator.) show
0 606.9 moveto
10 f4
($a != $b                # Is $a numerically unequal to $b?) show
0 596.4 moveto
10 f4
($a eq $b                # Is $a string-equal to $b?) show
0 585.9 moveto
10 f4
($a ne $b                # Is $a string-unequal to $b?) show
0 564.9 moveto
10 f4
(   ) show
0 554.4 moveto
10 f4
(   ) show
0 543.9 moveto
10 f4
(   You can also use logical and, or and not:) show
0 522.9 moveto
10 f4
(\($a && $b\)              # Is $a and $b true?) show
0 512.4 moveto
10 f4
(\($a || $b\)              # Is either $a or $b true?) show
0 501.9 moveto
10 f4
(!\($a\)                   # is $a false?) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(     _________________________________________________________________) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(for) show
0 407.4 moveto
10 f4
(   Perl has a for structure that mimics that of C. It has the form) show
0 386.4 moveto
10 f4
(for \(initialise; test; inc\)) show
0 375.9 moveto
10 f4
({) show
0 365.4 moveto
10 f4
(         first_action;) show
0 354.9 moveto
10 f4
(         second_action;) show
0 344.4 moveto
10 f4
(         etc) show
0 333.9 moveto
10 f4
(}) show
0 312.9 moveto
10 f4
(   First of all the statement initialise is executed. Then while test is) show
0 302.4 moveto
10 f4
(   true the block of actions is executed. After each time the block is) show
0 291.9 moveto
10 f4
(   executed inc takes place. Here is an example for loop to print out the) show
0 281.4 moveto
10 f4
(   numbers 0 to 9.) show
0 260.4 moveto
10 f4
(for \($i = 0; $i < 10; ++$i\)     # Start with $i = 1) show
0 249.9 moveto
10 f4
(                                # Do it while $i < 10) show
0 239.4 moveto
10 f4
(                                # Increment $i before repeating) show
0 228.9 moveto
10 f4
({) show
0 218.4 moveto
10 f4
(        print "$i\\n";) show
0 207.9 moveto
10 f4
(}) show
0 186.9 moveto
10 f4
(   ) show
0 176.4 moveto
10 f4
(   ) show
0 165.9 moveto
10 f4
(   ) show
0 155.4 moveto
10 f4
(     _________________________________________________________________) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(while and until) show
0 113.4 moveto
10 f4
(   Here is a program that reads some input from the keyboard and won't) show
0 102.9 moveto
10 f4
(   continue until it is the correct password) show
0 81.9 moveto
10 f4
(#!/usr/local/bin/perl) show
pagelevel restore
showpage
%%Page: 12 12
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(print "Password? ";             # Ask for input) show
0 701.4 moveto
10 f4
($a = <STDIN>;                   # Get input) show
0 690.9 moveto
10 f4
(chop $a;                        # Remove the newline at end) show
0 680.4 moveto
10 f4
(while \($a ne "fred"\)            # While input is wrong...) show
0 669.9 moveto
10 f4
({) show
0 659.4 moveto
10 f4
(    print "sorry. Again? ";     # Ask again) show
0 648.9 moveto
10 f4
(    $a = <STDIN>;               # Get input again) show
0 638.4 moveto
10 f4
(    chop $a;                    # Chop off newline again) show
0 627.9 moveto
10 f4
(}) show
0 606.9 moveto
10 f4
(   The curly-braced block of code is executed while the input does not) show
0 596.4 moveto
10 f4
(   equal the password. The while structure should be fairly clear, but) show
0 585.9 moveto
10 f4
(   this is the opportunity to notice several things. First, we can we) show
0 575.4 moveto
10 f4
(   read from the standard input \(the keyboard\) without opening the file) show
0 564.9 moveto
10 f4
(   first. Second, when the password is entered $a is given that value) show
0 554.4 moveto
10 f4
(   including the newline character at the end. The chop function removes) show
0 543.9 moveto
10 f4
(   the last character of a string which in this case is the newline.) show
0 533.4 moveto
10 f4
(   ) show
0 522.9 moveto
10 f4
(   To test the opposite thing we can use the until statement in just the) show
0 512.4 moveto
10 f4
(   same way. This executes the block repeatedly until the expression is) show
0 501.9 moveto
10 f4
(   true, not while it is true.) show
0 491.4 moveto
10 f4
(   ) show
0 480.9 moveto
10 f4
(   Another useful technique is putting the while or until check at the) show
0 470.4 moveto
10 f4
(   end of the statement block rather than at the beginning. This will) show
0 459.9 moveto
10 f4
(   require the presence of the do operator to mark the beginning of the) show
0 449.4 moveto
10 f4
(   block and the test at the end. If we forgo the sorry. Again message in) show
0 438.9 moveto
10 f4
(   the above password program then it could be written like this.) show
0 417.9 moveto
10 f4
(#!/usr/local/bin/perl) show
0 407.4 moveto
10 f4
(do) show
0 396.9 moveto
10 f4
({) show
0 386.4 moveto
10 f4
(        "Password? ";           # Ask for input) show
0 375.9 moveto
10 f4
(        $a = <STDIN>;           # Get input) show
0 365.4 moveto
10 f4
(        chop $a;                # Chop off newline) show
0 354.9 moveto
10 f4
(}) show
0 344.4 moveto
10 f4
(while \($a ne "fred"\)            # Redo while wrong input) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(     _________________________________________________________________) show
0 281.4 moveto
10 f4
(   ) show
0 270.9 moveto
10 f4
(Exercise) show
0 249.9 moveto
10 f4
(   Modify the program from the previous exercise so that each line of the) show
0 239.4 moveto
10 f4
(   file is read in one by one and is output with a line number at the) show
0 228.9 moveto
10 f4
(   beginning. You should get something like:) show
0 207.9 moveto
10 f4
(1 root:oYpYXm/qRO6N2:0:0:Super-User:/:/bin/csh) show
0 197.4 moveto
10 f4
(2 sysadm:*:0:0:System V Administration:/usr/admin:/bin/sh) show
0 186.9 moveto
10 f4
(3 diag:*:0:996:Hardware Diagnostics:/usr/diags:/bin/csh) show
0 176.4 moveto
10 f4
(etc) show
0 155.4 moveto
10 f4
(   You may find it useful to use the structure) show
0 134.4 moveto
10 f4
(while \($line = <INFO>\)) show
0 123.9 moveto
10 f4
({) show
0 113.4 moveto
10 f4
(        ...) show
0 102.9 moveto
10 f4
(}) show
0 81.9 moveto
10 f4
(   When you have done this see if you can alter it so that line numbers) show
pagelevel restore
showpage
%%Page: 13 13
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   are printed as 001, 002, ..., 009, 010, 011, 012, etc. To do this you) show
0 701.4 moveto
10 f4
(   should only need to change one line by inserting an extra four) show
0 690.9 moveto
10 f4
(   characters. Perl's clever like that.) show
0 680.4 moveto
10 f4
(   ) show
0 669.9 moveto
10 f4
(   ) show
0 659.4 moveto
10 f4
(     _________________________________________________________________) show
0 648.9 moveto
10 f4
(   ) show
0 638.4 moveto
10 f4
(   Previous Start Next ) show
0 627.9 moveto
10 f4
(     _________________________________________________________________) show
0 617.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/conditionals.html -----) show
0 596.4 moveto
10 f4
(   ) show
0 585.9 moveto
10 f4
(     _________________________________________________________________) show
0 575.4 moveto
10 f4
(   ) show
0 564.9 moveto
10 f4
(                                 CONDITIONALS) show
0 554.4 moveto
10 f4
(                                       ) show
0 543.9 moveto
10 f4
(   ) show
0 533.4 moveto
10 f4
(     _________________________________________________________________) show
0 522.9 moveto
10 f4
(   ) show
0 512.4 moveto
10 f4
(   ) show
0 501.9 moveto
10 f4
(   ) show
0 491.4 moveto
10 f4
(   Of course Perl also allows if/then/else statements. These are of the) show
0 480.9 moveto
10 f4
(   following form:) show
0 459.9 moveto
10 f4
(if \($a\)) show
0 449.4 moveto
10 f4
({) show
0 438.9 moveto
10 f4
(        print "The string is not empty\\n";) show
0 428.4 moveto
10 f4
(}) show
0 417.9 moveto
10 f4
(else) show
0 407.4 moveto
10 f4
({) show
0 396.9 moveto
10 f4
(        print "The string is empty\\n";) show
0 386.4 moveto
10 f4
(}) show
0 365.4 moveto
10 f4
(   For this, remember that an empty string is considered to be false. It) show
0 354.9 moveto
10 f4
(   will also give an "empty" result if $a is the string 0.) show
0 344.4 moveto
10 f4
(   ) show
0 333.9 moveto
10 f4
(   It is also possible to include more alternatives in a conditional) show
0 323.4 moveto
10 f4
(   statement:) show
0 302.4 moveto
10 f4
(if \(!$a\)                        # The ! is the not operator) show
0 291.9 moveto
10 f4
({) show
0 281.4 moveto
10 f4
(        print "The string is empty\\n";) show
0 270.9 moveto
10 f4
(}) show
0 260.4 moveto
10 f4
(elsif \(length\($a\) == 1\)         # If above fails, try this) show
0 249.9 moveto
10 f4
({) show
0 239.4 moveto
10 f4
(        print "The string has one character\\n";) show
0 228.9 moveto
10 f4
(}) show
0 218.4 moveto
10 f4
(elsif \(length\($a\) == 2\)         # If that fails, try this) show
0 207.9 moveto
10 f4
({) show
0 197.4 moveto
10 f4
(        print "The string has two characters\\n";) show
0 186.9 moveto
10 f4
(}) show
0 176.4 moveto
10 f4
(else                            # Now, everything has failed) show
0 165.9 moveto
10 f4
({) show
0 155.4 moveto
10 f4
(        print "The string has lots of characters\\n";) show
0 144.9 moveto
10 f4
(}) show
0 123.9 moveto
10 f4
(   In this, it is important to notice that the elsif statement really) show
0 113.4 moveto
10 f4
(   does have an "e" missing.) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(     _________________________________________________________________) show
pagelevel restore
showpage
%%Page: 14 14
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(Exercise) show
0 680.4 moveto
10 f4
(   Find a fairly large file that contains some text and some blank lines.) show
0 669.9 moveto
10 f4
(   The file ~nik/WWW/Misc/electricity.txt is pretty good because it's) show
0 659.4 moveto
10 f4
(   funny apart from anything else. It was originally posted to our local) show
0 648.9 moveto
10 f4
(   news system by David O'Brien.) show
0 638.4 moveto
10 f4
(   ) show
0 627.9 moveto
10 f4
(   From the previous exercise you should have a program which prints out) show
0 617.4 moveto
10 f4
(   the password file with line numbers. Change it so that works with the) show
0 606.9 moveto
10 f4
(   text file. Now alter the program so that line numbers aren't printed) show
0 596.4 moveto
10 f4
(   or counted with blank lines, but every line is still printed,) show
0 585.9 moveto
10 f4
(   including the blank ones. Remember that when a line of the file is) show
0 575.4 moveto
10 f4
(   read in it will still include its newline character at the end.) show
0 564.9 moveto
10 f4
(   ) show
0 554.4 moveto
10 f4
(   ) show
0 543.9 moveto
10 f4
(     _________________________________________________________________) show
0 533.4 moveto
10 f4
(   ) show
0 522.9 moveto
10 f4
(   Previous Start Next ) show
0 512.4 moveto
10 f4
(     _________________________________________________________________) show
0 501.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/matching.html -----) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(     _________________________________________________________________) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(                                STRING MATCHING) show
0 438.9 moveto
10 f4
(                                       ) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(     _________________________________________________________________) show
0 407.4 moveto
10 f4
(   ) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(   ) show
0 375.9 moveto
10 f4
(   One of the most useful features of Perl \(if not the most useful) show
0 365.4 moveto
10 f4
(   feature\) is its powerful string manipulation facilities. At the heart) show
0 354.9 moveto
10 f4
(   of this is the regular expression \(RE\) which is shared by many other) show
0 344.4 moveto
10 f4
(   UNIX utilities.) show
0 333.9 moveto
10 f4
(   ) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(     _________________________________________________________________) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(Regular expressions) show
0 270.9 moveto
10 f4
(   A regular expression is contained in slashes, and matching occurs with) show
0 260.4 moveto
10 f4
(   the =~ operator. The following expression is true if the string the) show
0 249.9 moveto
10 f4
(   appears in variable $sentence.) show
0 228.9 moveto
10 f4
($sentence =~ /the/) show
0 207.9 moveto
10 f4
(   The RE is case sensitive, so if) show
0 186.9 moveto
10 f4
($sentence = "The quick brown fox";) show
0 165.9 moveto
10 f4
(   then the above match will be false. The operator !~ is used for) show
0 155.4 moveto
10 f4
(   spotting a non-match. In the above example) show
0 134.4 moveto
10 f4
($sentence !~ /the/) show
0 113.4 moveto
10 f4
(   is true because the string the does not appear in $sentence.) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(     _________________________________________________________________) show
pagelevel restore
showpage
%%Page: 15 15
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(The $_ special variable) show
0 680.4 moveto
10 f4
(   We could use a conditional as) show
0 659.4 moveto
10 f4
(if \($sentence =~ /under/\)) show
0 648.9 moveto
10 f4
({) show
0 638.4 moveto
10 f4
(        print "We're talking about rugby\\n";) show
0 627.9 moveto
10 f4
(}) show
0 606.9 moveto
10 f4
(   which would print out a message if we had either of the following) show
0 585.9 moveto
10 f4
($sentence = "Up and under";) show
0 575.4 moveto
10 f4
($sentence = "Best winkles in Sunderland";) show
0 554.4 moveto
10 f4
(   But it's often much easier if we assign the sentence to the special) show
0 543.9 moveto
10 f4
(   variable $_ which is of course a scalar. If we do this then we can) show
0 533.4 moveto
10 f4
(   avoid using the match and non-match operators and the above can be) show
0 522.9 moveto
10 f4
(   written simply as) show
0 501.9 moveto
10 f4
(if \(/under/\)) show
0 491.4 moveto
10 f4
({) show
0 480.9 moveto
10 f4
(        print "We're talking about rugby\\n";) show
0 470.4 moveto
10 f4
(}) show
0 449.4 moveto
10 f4
(   The $_ variable is the default for many Perl operations and tends to) show
0 438.9 moveto
10 f4
(   be used very heavily.) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(     _________________________________________________________________) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(More on REs) show
0 365.4 moveto
10 f4
(   In an RE there are plenty of special characters, and it is these that) show
0 354.9 moveto
10 f4
(   both give them their power and make them appear very complicated. It's) show
0 344.4 moveto
10 f4
(   best to build up your use of REs slowly; their creation can be) show
0 333.9 moveto
10 f4
(   something of an art form.) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(   Here are some special RE characters and their meaning) show
0 291.9 moveto
10 f4
(.       # Any single character except a newline) show
0 281.4 moveto
10 f4
(^       # The beginning of the line or string) show
0 270.9 moveto
10 f4
($       # The end of the line or string) show
0 260.4 moveto
10 f4
(*       # Zero or more of the last character) show
0 249.9 moveto
10 f4
(+       # One or more of the last character) show
0 239.4 moveto
10 f4
(?       # Zero or one of the last character) show
0 218.4 moveto
10 f4
(   and here are some example matches. Remember that should be enclosed in) show
0 207.9 moveto
10 f4
(   /.../ slashes to be used.) show
0 186.9 moveto
10 f4
(t.e     # t followed by anthing followed by e) show
0 176.4 moveto
10 f4
(        # This will match the) show
0 165.9 moveto
10 f4
(        #                 tre) show
0 155.4 moveto
10 f4
(        #                 tle) show
0 144.9 moveto
10 f4
(        # but not te) show
0 134.4 moveto
10 f4
(        #         tale) show
0 123.9 moveto
10 f4
(^f      # f at the beginning of a line) show
0 113.4 moveto
10 f4
(^ftp    # ftp at the beginning of a line) show
0 102.9 moveto
10 f4
(e$      # e at the end of a line) show
0 92.4 moveto
10 f4
(tle$    # tle at the end of a line) show
0 81.9 moveto
10 f4
(und*    # un followed by zero or more d characters) show
pagelevel restore
showpage
%%Page: 16 16
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(        # This will match un) show
0 701.4 moveto
10 f4
(        #                 und) show
0 690.9 moveto
10 f4
(        #                 undd) show
0 680.4 moveto
10 f4
(        #                 unddd \(etc\)) show
0 669.9 moveto
10 f4
(.*      # Any string without a newline. This is because) show
0 659.4 moveto
10 f4
(        # the . matches anything except a newline and) show
0 648.9 moveto
10 f4
(        # the * means zero or more of these.) show
0 638.4 moveto
10 f4
(^$      # A line with nothing in it.) show
0 617.4 moveto
10 f4
(   ) show
0 606.9 moveto
10 f4
(   ) show
0 596.4 moveto
10 f4
(   There are even more options. Square brackets are used to match any one) show
0 585.9 moveto
10 f4
(   of the characters inside them. Inside square brackets a - indicates) show
0 575.4 moveto
10 f4
(   "between" and a ^ at the beginning means "not":) show
0 554.4 moveto
10 f4
([qjk]           # Either q or j or k) show
0 543.9 moveto
10 f4
([^qjk]          # Neither q nor j nor k) show
0 533.4 moveto
10 f4
([a-z]           # Anything from a to z inclusive) show
0 522.9 moveto
10 f4
([^a-z]          # No lower case letters) show
0 512.4 moveto
10 f4
([a-zA-Z]        # Any letter) show
0 501.9 moveto
10 f4
([a-z]+          # Any non-zero sequence of lower case letters) show
0 480.9 moveto
10 f4
(   At this point you can probably skip to the end and do at least most of) show
0 470.4 moveto
10 f4
(   the exercise. The rest is mostly just for reference.) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(   A vertical bar | represents an "or" and parentheses \(...\) can be used) show
0 438.9 moveto
10 f4
(   to group things together:) show
0 417.9 moveto
10 f4
(jelly|cream     # Either jelly or cream) show
0 407.4 moveto
10 f4
(\(eg|le\)gs       # Either eggs or legs) show
0 396.9 moveto
10 f4
(\(da\)+           # Either da or dada or dadada or...) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(   ) show
0 354.9 moveto
10 f4
(   Here are some more special characters:) show
0 333.9 moveto
10 f4
(\\n              # A newline) show
0 323.4 moveto
10 f4
(\\t              # A tab) show
0 312.9 moveto
10 f4
(\\w              # Any alphanumeric \(word\) character.) show
0 302.4 moveto
10 f4
(                # The same as [a-zA-Z0-9_]) show
0 291.9 moveto
10 f4
(\\W              # Any non-word character.) show
0 281.4 moveto
10 f4
(                # The same as [^a-zA-Z0-9_]) show
0 270.9 moveto
10 f4
(\\d              # Any digit. The same as [0-9]) show
0 260.4 moveto
10 f4
(\\D              # Any non-digit. The same as [^0-9]) show
0 249.9 moveto
10 f4
(\\s              # Any whitespace character: space,) show
0 239.4 moveto
10 f4
(                # tab, newline, etc) show
0 228.9 moveto
10 f4
(\\S              # Any non-whitespace character) show
0 218.4 moveto
10 f4
(\\b              # A word boundary, outside [] only) show
0 207.9 moveto
10 f4
(\\B              # No word boundary) show
0 186.9 moveto
10 f4
(   ) show
0 176.4 moveto
10 f4
(   ) show
0 165.9 moveto
10 f4
(   Clearly characters like $, |, [, \), \\, / and so on are peculiar cases) show
0 155.4 moveto
10 f4
(   in regular expressions. If you want to match for one of those then you) show
0 144.9 moveto
10 f4
(   have to preceed it by a backslash. So:) show
0 123.9 moveto
10 f4
(\\|              # Vertical bar) show
0 113.4 moveto
10 f4
(\\[              # An open square bracket) show
0 102.9 moveto
10 f4
(\\\)              # A closing parenthesis) show
0 92.4 moveto
10 f4
(\\*              # An asterisk) show
0 81.9 moveto
10 f4
(\\^              # A carat symbol) show
pagelevel restore
showpage
%%Page: 17 17
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(\\/              # A slash) show
0 701.4 moveto
10 f4
(\\\\              # A backslash) show
0 680.4 moveto
10 f4
(   and so on.) show
0 669.9 moveto
10 f4
(   ) show
0 659.4 moveto
10 f4
(   ) show
0 648.9 moveto
10 f4
(     _________________________________________________________________) show
0 638.4 moveto
10 f4
(   ) show
0 627.9 moveto
10 f4
(Some example REs) show
0 606.9 moveto
10 f4
(   As was mentioned earlier, it's probably best to build up your use of) show
0 596.4 moveto
10 f4
(   regular expressions slowly. Here are a few examples. Remember that to) show
0 585.9 moveto
10 f4
(   use them for matching they should be put in /.../ slashes) show
0 564.9 moveto
10 f4
([01]            # Either "0" or "1") show
0 554.4 moveto
10 f4
(\\/0             # A division by zero: "/0") show
0 543.9 moveto
10 f4
(\\/ 0            # A division by zero with a space: "/ 0") show
0 533.4 moveto
10 f4
(\\/\\s0           # A division by zero with a whitespace:) show
0 522.9 moveto
10 f4
(                # "/ 0" where the space may be a tab etc.) show
0 512.4 moveto
10 f4
(\\/ *0           # A division by zero with possibly some) show
0 501.9 moveto
10 f4
(                # spaces: "/0" or "/ 0" or "/  0" etc.) show
0 491.4 moveto
10 f4
(\\/\\s*0          # A division by zero with possibly some) show
0 480.9 moveto
10 f4
(                # whitespace.) show
0 470.4 moveto
10 f4
(\\/\\s*0\\.0*      # As the previous one, but with decimal) show
0 459.9 moveto
10 f4
(                # point and maybe some 0s after it. Accepts) show
0 449.4 moveto
10 f4
(                # "/0." and "/0.0" and "/0.00" etc and) show
0 438.9 moveto
10 f4
(                # "/ 0." and "/  0.0" and "/   0.00" etc.) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(   ) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(     _________________________________________________________________) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(Exercise) show
0 344.4 moveto
10 f4
(   Previously your program counted non-empty lines. Alter it so that) show
0 333.9 moveto
10 f4
(   instead of counting non-empty lines it counts only lines with) show
0 323.4 moveto
10 f4
(     * the letter x) show
0 312.9 moveto
10 f4
(     * the string the) show
0 302.4 moveto
10 f4
(     * the string the which may or may not have a capital t) show
0 291.9 moveto
10 f4
(     * the word the with or without a capital. Use \\b to detect word) show
0 281.4 moveto
10 f4
(       boundaries.) show
0 270.9 moveto
10 f4
(       ) show
0 260.4 moveto
10 f4
(   In each case the program should print out every line, but it should) show
0 249.9 moveto
10 f4
(   only number those specified. Try to use the $_ variable to avoid using) show
0 239.4 moveto
10 f4
(   the =~ match operator explicitly.) show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(     _________________________________________________________________) show
0 197.4 moveto
10 f4
(   ) show
0 186.9 moveto
10 f4
(   Previous Start Next ) show
0 176.4 moveto
10 f4
(     _________________________________________________________________) show
0 165.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/sandtr.html -----) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(     _________________________________________________________________) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(                         SUBSTITUTION AND TRANSLATION) show
0 102.9 moveto
10 f4
(                                       ) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(     _________________________________________________________________) show
pagelevel restore
showpage
%%Page: 18 18
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   ) show
0 690.9 moveto
10 f4
(   ) show
0 680.4 moveto
10 f4
(   As well as identifying regular expressions Perl can make substitutions) show
0 669.9 moveto
10 f4
(   based on those matches. The way to do this is to use the s function) show
0 659.4 moveto
10 f4
(   which is designed to mimic the way substitution is done in the vi text) show
0 648.9 moveto
10 f4
(   editor. Once again the match operator is used, and once again if it is) show
0 638.4 moveto
10 f4
(   omitted then the substitution is assumed to take place with the $_) show
0 627.9 moveto
10 f4
(   variable.) show
0 617.4 moveto
10 f4
(   ) show
0 606.9 moveto
10 f4
(   To replace an occurrence of london by London in the string $sentence) show
0 596.4 moveto
10 f4
(   we use the expression) show
0 575.4 moveto
10 f4
($sentence =~ s/london/London/) show
0 554.4 moveto
10 f4
(   and to do the same thing with the $_ variable just) show
0 533.4 moveto
10 f4
(s/london/London/) show
0 512.4 moveto
10 f4
(   Notice that the two regular expressions \(london and London\) are) show
0 501.9 moveto
10 f4
(   surrounded by a total of three slashes. The result of this expression) show
0 491.4 moveto
10 f4
(   is the number of substitutions made, so it is either 0 \(false\) or 1) show
0 480.9 moveto
10 f4
(   \(true\) in this case.) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(   ) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(     _________________________________________________________________) show
0 417.9 moveto
10 f4
(   ) show
0 407.4 moveto
10 f4
(Options) show
0 386.4 moveto
10 f4
(   This example only replaces the first occurrence of the string, and it) show
0 375.9 moveto
10 f4
(   may be that there will be more than one such string we want to) show
0 365.4 moveto
10 f4
(   replace. To make a global substitution the last slash is followed by a) show
0 354.9 moveto
10 f4
(   g as follows:) show
0 333.9 moveto
10 f4
(s/london/London/g) show
0 312.9 moveto
10 f4
(   which of course works on the $_ variable. Again the expression returns) show
0 302.4 moveto
10 f4
(   the number of substitutions made, which is 0 \(false\) or something) show
0 291.9 moveto
10 f4
(   greater than 0 \(true\).) show
0 281.4 moveto
10 f4
(   ) show
0 270.9 moveto
10 f4
(   If we want to also replace occurrences of lOndon, lonDON, LoNDoN and) show
0 260.4 moveto
10 f4
(   so on then we could use) show
0 239.4 moveto
10 f4
(s/[Ll][Oo][Nn][Dd][Oo][Nn]/London/g) show
0 218.4 moveto
10 f4
(   but an easier way is to use the i option \(for "ignore case"\). The) show
0 207.9 moveto
10 f4
(   expression) show
0 186.9 moveto
10 f4
(s/london/London/gi) show
0 165.9 moveto
10 f4
(   will make a global substitution ignoring case. The i option is also) show
0 155.4 moveto
10 f4
(   used in the basic /.../ regular expression match.) show
0 144.9 moveto
10 f4
(   ) show
0 134.4 moveto
10 f4
(   ) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(   ) show
0 102.9 moveto
10 f4
(     _________________________________________________________________) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(Remembering patterns) show
pagelevel restore
showpage
%%Page: 19 19
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 708.9 moveto
10 f4
(   It's often useful to remember patterns that have been matched so that) show
0 698.4 moveto
10 f4
(   they can be used again. It just so happens that anything matched in) show
0 687.9 moveto
10 f4
(   parentheses gets remembered in the variables $1,...,$9. These strings) show
0 677.4 moveto
10 f4
(   can also be used in the same regular expression \(or substitution\) by) show
0 666.9 moveto
10 f4
(   using the special RE codes \\1,...,\\9. For example) show
0 645.9 moveto
10 f4
($_ = "Lord Whopper of Fibbing";) show
0 635.4 moveto
10 f4
(s/\([A-Z]\)/:\\1:/g;) show
0 624.9 moveto
10 f4
(print "$_\\n";) show
0 603.9 moveto
10 f4
(   will replace each upper case letter by that letter surrounded by) show
0 593.4 moveto
10 f4
(   colons. It will print :L:ord :W:hopper of :F:ibbing. The variables) show
0 582.9 moveto
10 f4
(   $1,...,$9 are read-only variables; you cannot alter them yourself.) show
0 572.4 moveto
10 f4
(   ) show
0 561.9 moveto
10 f4
(   As another example, the test) show
0 540.9 moveto
10 f4
(if \(/\(\\b.+\\b\) \\1/\)) show
0 530.4 moveto
10 f4
({) show
0 519.9 moveto
10 f4
(        print "Found $1 repeated\\n";) show
0 509.4 moveto
10 f4
(}) show
0 488.4 moveto
10 f4
(   will identify any words repeated. Each \\b represents a word boundary) show
0 477.9 moveto
10 f4
(   and the .+ matches any non-empty string, so \\b.+\\b matches anything) show
0 467.4 moveto
10 f4
(   between two word boundaries. This is then remembered by the) show
0 456.9 moveto
10 f4
(   parentheses and stored as \\1 for regular expressions and as $1 for the) show
0 446.4 moveto
10 f4
(   rest of the program.) show
0 435.9 moveto
10 f4
(   ) show
0 425.4 moveto
10 f4
(   The following swaps the first and last characters of a line in the $_) show
0 414.9 moveto
10 f4
(   variable:) show
0 393.9 moveto
10 f4
(s/^\(.\)\(.*\)\(.\)$/\\3\\2\\1/) show
0 372.9 moveto
10 f4
(   The ^ and $ match the beginning and end of the line. The \\1 code) show
0 362.4 moveto
10 f4
(   stores the first character; the \\2 code stores everything else up the) show
0 351.9 moveto
10 f4
(   last character which is stored in the \\3 code. Then that whole line is) show
0 341.4 moveto
10 f4
(   replaced with \\1 and \\3 swapped round.) show
0 330.9 moveto
10 f4
(   ) show
0 320.4 moveto
10 f4
(   After a match, you can use the special read-only variables $` and $&) show
0 309.9 moveto
10 f4
(   and $' to find what was matched before, during and after the seach. So) show
0 299.4 moveto
10 f4
(   after) show
0 278.4 moveto
10 f4
($_ = "Lord Whopper of Fibbing";) show
0 267.9 moveto
10 f4
(/pp/;) show
0 246.9 moveto
10 f4
(   all of the following are true. \(Remember that eq is the) show
0 236.4 moveto
10 f4
(   string-equality test.\)) show
0 215.4 moveto
10 f4
($` eq "Lord Wo";) show
0 204.9 moveto
10 f4
($& eq "pp";) show
0 194.4 moveto
10 f4
($' eq "er of Fibbing";) show
0 173.4 moveto
10 f4
(   ) show
0 162.9 moveto
10 f4
(   ) show
0 152.4 moveto
10 f4
(   Finally on the subject of remembering patterns it's worth knowing that) show
0 141.9 moveto
10 f4
(   inside of the slashes of a match or a substitution variables are) show
0 131.4 moveto
10 f4
(   interpolated. So) show
0 110.4 moveto
10 f4
($search = "the";) show
0 99.9 moveto
10 f4
(s/$search/xxx/g;) show
0 78.9 moveto
10 f4
(   will replace every occurrence of the with xxx. If you want to replace) show
pagelevel restore
showpage
%%Page: 20 20
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   every occurence of there then you cannot do s/$searchre/xxx/ because) show
0 701.4 moveto
10 f4
(   this will be interpolated as the variable $searchre. Instead you) show
0 690.9 moveto
10 f4
(   should put the variable name in curly braces so that the code becomes) show
0 669.9 moveto
10 f4
($search = "the";) show
0 659.4 moveto
10 f4
(s/${search}re/xxx/;) show
0 638.4 moveto
10 f4
(   ) show
0 627.9 moveto
10 f4
(   ) show
0 617.4 moveto
10 f4
(   ) show
0 606.9 moveto
10 f4
(     _________________________________________________________________) show
0 596.4 moveto
10 f4
(   ) show
0 585.9 moveto
10 f4
(Translation) show
0 564.9 moveto
10 f4
(   The tr function allows character-by-character translation. The) show
0 554.4 moveto
10 f4
(   following expression replaces each a with e, each b with d, and each c) show
0 543.9 moveto
10 f4
(   with f in the variable $sentence. The expression returns the number of) show
0 533.4 moveto
10 f4
(   substitutions made.) show
0 512.4 moveto
10 f4
($sentence =~ tr/abc/edf/) show
0 491.4 moveto
10 f4
(   ) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(   Most of the special RE codes do not apply in the tr function. For) show
0 459.9 moveto
10 f4
(   example, the statement here counts the number of asterisks in the) show
0 449.4 moveto
10 f4
(   $sentence variable and stores that in the $count variable.) show
0 428.4 moveto
10 f4
($count = \($sentence =~ tr/*/*/\);) show
0 407.4 moveto
10 f4
(   However, the dash is still used to mean "between". This statement) show
0 396.9 moveto
10 f4
(   converts $_ to upper case.) show
0 375.9 moveto
10 f4
(tr/a-z/A-Z/;) show
0 354.9 moveto
10 f4
(   ) show
0 344.4 moveto
10 f4
(   ) show
0 333.9 moveto
10 f4
(   ) show
0 323.4 moveto
10 f4
(     _________________________________________________________________) show
0 312.9 moveto
10 f4
(   ) show
0 302.4 moveto
10 f4
(Exercise) show
0 281.4 moveto
10 f4
(   Your current program should count lines of a file which contain a) show
0 270.9 moveto
10 f4
(   certain string. Modify it so that it counts lines with double letters) show
0 260.4 moveto
10 f4
(   \(or any other double character\). Modify it again so that these double) show
0 249.9 moveto
10 f4
(   letters appear also in parentheses. For example your program would) show
0 239.4 moveto
10 f4
(   produce a line like this among others:) show
0 218.4 moveto
10 f4
(023 Amp, James Wa\(tt\), Bob Transformer, etc. These pion\(ee\)rs conducted many) show
0 197.4 moveto
10 f4
(   Try to get it so that all pairs of letters are in parentheses, not) show
0 186.9 moveto
10 f4
(   just the first pair on each line.) show
0 176.4 moveto
10 f4
(   ) show
0 165.9 moveto
10 f4
(   For a slightly more interesting program you might like to try the) show
0 155.4 moveto
10 f4
(   following. Suppose your program is called countlines. Then you would) show
0 144.9 moveto
10 f4
(   call it with) show
0 123.9 moveto
10 f4
(./countlines) show
0 102.9 moveto
10 f4
(   However, if you call it with several arguments, as in) show
0 81.9 moveto
10 f4
(./countlines first second etc) show
pagelevel restore
showpage
%%Page: 21 21
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 708.9 moveto
10 f4
(   then those arguments are stored in the array @ARGV. In the above) show
0 698.4 moveto
10 f4
(   example we have $ARGV[0] is first and $ARGV[1] is second and $ARGV[2]) show
0 687.9 moveto
10 f4
(   is etc. Modify your program so that it accepts one argument and counts) show
0 677.4 moveto
10 f4
(   only those lines with that string. It should also put occurrences of) show
0 666.9 moveto
10 f4
(   this string in paretheses. So) show
0 645.9 moveto
10 f4
(./countlines the) show
0 624.9 moveto
10 f4
(   will output something like this line among others:) show
0 603.9 moveto
10 f4
(019 But \(the\) greatest Electrical Pioneer of \(the\)m all was Thomas Edison, who) show
0 582.9 moveto
10 f4
(   ) show
0 572.4 moveto
10 f4
(   ) show
0 561.9 moveto
10 f4
(   ) show
0 551.4 moveto
10 f4
(     _________________________________________________________________) show
0 540.9 moveto
10 f4
(   ) show
0 530.4 moveto
10 f4
(   Previous Start Next ) show
0 519.9 moveto
10 f4
(     _________________________________________________________________) show
0 509.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/split.html -----) show
0 488.4 moveto
10 f4
(   ) show
0 477.9 moveto
10 f4
(     _________________________________________________________________) show
0 467.4 moveto
10 f4
(   ) show
0 456.9 moveto
10 f4
(                                     SPLIT) show
0 446.4 moveto
10 f4
(                                       ) show
0 435.9 moveto
10 f4
(   ) show
0 425.4 moveto
10 f4
(     _________________________________________________________________) show
0 414.9 moveto
10 f4
(   ) show
0 404.4 moveto
10 f4
(   ) show
0 393.9 moveto
10 f4
(   ) show
0 383.4 moveto
10 f4
(   A very useful function in Perl is split, which splits up a string and) show
0 372.9 moveto
10 f4
(   places it into an array. The function uses a regular expression and as) show
0 362.4 moveto
10 f4
(   usual works on the $_ variable unless otherwise specified.) show
0 351.9 moveto
10 f4
(   ) show
0 341.4 moveto
10 f4
(   The split function is used like this:) show
0 320.4 moveto
10 f4
($info = "Caine:Michael:Actor:14, Leafy Drive";) show
0 309.9 moveto
10 f4
(@personal = split\(/:/, $info\);) show
0 288.9 moveto
10 f4
(   which has the same overall effect as) show
0 267.9 moveto
10 f4
(@personal = \("Caine", "Michael", "Actor", "14, Leafy Drive"\);) show
0 246.9 moveto
10 f4
(   If we have the information stored in the $_ variable then we can just) show
0 236.4 moveto
10 f4
(   use this instead) show
0 215.4 moveto
10 f4
(@personal = split\(/:/\);) show
0 194.4 moveto
10 f4
(   ) show
0 183.9 moveto
10 f4
(   ) show
0 173.4 moveto
10 f4
(   If the fields are divided by any number of colons then we can use the) show
0 162.9 moveto
10 f4
(   RE codes to get round this. The code) show
0 141.9 moveto
10 f4
($_ = "Capes:Geoff::Shot putter:::Big Avenue";) show
0 131.4 moveto
10 f4
(@personal = split\(/:+/\);) show
0 110.4 moveto
10 f4
(   is the same as) show
0 89.4 moveto
10 f4
(@personal = \("Capes", "Geoff",) show
0 78.9 moveto
10 f4
(             "Shot putter", "Big Avenue"\);) show
pagelevel restore
showpage
%%Page: 22 22
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 705.9 moveto
10 f4
(   But this:) show
0 684.9 moveto
10 f4
($_ = "Capes:Geoff::Shot putter:::Big Avenue";) show
0 674.4 moveto
10 f4
(@personal = split\(/:/\);) show
0 653.4 moveto
10 f4
(   would be like) show
0 632.4 moveto
10 f4
(@personal = \("Capes", "Geoff", "",) show
0 621.9 moveto
10 f4
(             "Shot putter", "", "", "Big Avenue"\);) show
0 600.9 moveto
10 f4
(   ) show
0 590.4 moveto
10 f4
(   ) show
0 579.9 moveto
10 f4
(   A word can be split into characters, a sentence split into words and a) show
0 569.4 moveto
10 f4
(   paragraph split into sentences:) show
0 548.4 moveto
10 f4
(@chars = split\(//, $word\);) show
0 537.9 moveto
10 f4
(@words = split\(/ /, $sentence\);) show
0 527.4 moveto
10 f4
(@sentences = split\(/\\./, $paragraph\);) show
0 506.4 moveto
10 f4
(   In the first case the null string is matched between each character,) show
0 495.9 moveto
10 f4
(   and that is why the @chars array is an array of characters - ie an) show
0 485.4 moveto
10 f4
(   array of strings of length 1.) show
0 474.9 moveto
10 f4
(   ) show
0 464.4 moveto
10 f4
(   ) show
0 453.9 moveto
10 f4
(   ) show
0 443.4 moveto
10 f4
(   ) show
0 432.9 moveto
10 f4
(     _________________________________________________________________) show
0 422.4 moveto
10 f4
(   ) show
0 411.9 moveto
10 f4
(Exercise) show
0 390.9 moveto
10 f4
(   A useful tool in natural language processing is concordance. This) show
0 380.4 moveto
10 f4
(   allows a specific string to be displayed in its immediate context) show
0 369.9 moveto
10 f4
(   whereever it appears in a text. For example, a concordance program) show
0 359.4 moveto
10 f4
(   identifying the target string the might produce some of the following) show
0 348.9 moveto
10 f4
(   output. Notice how the occurrences of the target string line up) show
0 338.4 moveto
10 f4
(   vertically.) show
0 317.4 moveto
10 f4
(discovered \(this is the truth\) that when he) show
0 306.9 moveto
10 f4
(t kinds of metal to the leg of a frog, an e) show
0 296.4 moveto
10 f4
(rrent developed and the frog's leg kicked,) show
0 285.9 moveto
10 f4
( longer attached to the frog, which was dea) show
0 275.4 moveto
10 f4
(normous advances in the field of amphibian) show
0 264.9 moveto
10 f4
(ch it hop back into the pond -- almost.  Bu) show
0 254.4 moveto
10 f4
(ond -- almost.  But the greatest Electrical) show
0 243.9 moveto
10 f4
(ectrical Pioneer of them all was Thomas Edi) show
0 222.9 moveto
10 f4
(   ) show
0 212.4 moveto
10 f4
(   ) show
0 201.9 moveto
10 f4
(   This exercise is to write such a program. Here are some tips:) show
0 191.4 moveto
10 f4
(     * Read the entire file into array \(this obviously isn't useful in) show
0 180.9 moveto
10 f4
(       general because the file may be extremely large, but we won't) show
0 170.4 moveto
10 f4
(       worry about that here\). Each item in the array will be a line of) show
0 159.9 moveto
10 f4
(       the file.) show
0 149.4 moveto
10 f4
(     * When the chop function is used on an array it chops off the last) show
0 138.9 moveto
10 f4
(       character of every item in the array.) show
0 128.4 moveto
10 f4
(     * Recall that you can join the whole array together with a statement) show
0 117.9 moveto
10 f4
(       like $text = "@lines";) show
0 107.4 moveto
10 f4
(     * Use the target string as delimiter for splitting the text. \(Ie,) show
0 96.9 moveto
10 f4
(       use the target string in place of the colon in our previous) show
0 86.4 moveto
10 f4
(       examples.\) You should then have an array of all the strings) show
0 75.9 moveto
10 f4
(       between the target strings.) show
pagelevel restore
showpage
%%Page: 23 23
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(     * For each array element in turn, print it out, print the target) show
0 701.4 moveto
10 f4
(       string, and then print the next array element.) show
0 690.9 moveto
10 f4
(     * Recall that the last element of an array @food has index $#food.) show
0 680.4 moveto
10 f4
(       ) show
0 669.9 moveto
10 f4
(   As it stands this would be a pretty good program, but the target) show
0 659.4 moveto
10 f4
(   strings won't line up vertically. To tidy up the strings you'll need) show
0 648.9 moveto
10 f4
(   the substr function. Here are three examples of its use.) show
0 627.9 moveto
10 f4
(substr\("Once upon a time", 3, 4\);       # returns "e up") show
0 617.4 moveto
10 f4
(substr\("Once upon a time", 7\);          # returns "on a time") show
0 606.9 moveto
10 f4
(substr\("Once upon a time", -6, 5\);      # returns "a tim") show
0 585.9 moveto
10 f4
(   The first example returns a substring of length 4 starting at position) show
0 575.4 moveto
10 f4
(   3. Remember that the first character of a string has index 0. The) show
0 564.9 moveto
10 f4
(   second example shows that missing out the length gives the substring) show
0 554.4 moveto
10 f4
(   right to the end of the string The third example shows that you can) show
0 543.9 moveto
10 f4
(   also index from the end using a negative index. It returns the) show
0 533.4 moveto
10 f4
(   substring that starts at the 6th character from the end and has length) show
0 522.9 moveto
10 f4
(   5.) show
0 512.4 moveto
10 f4
(   ) show
0 501.9 moveto
10 f4
(   If you use a negative index that extends beyond the beginning of the) show
0 491.4 moveto
10 f4
(   string then Perl will return nothing or give a warning. To avoid this) show
0 480.9 moveto
10 f4
(   happening you can pad out the string by using the x operator mentioned) show
0 470.4 moveto
10 f4
(   earlier. The expression \(" "x30\) produces 30 spaces, for example.) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(   ) show
0 438.9 moveto
10 f4
(     _________________________________________________________________) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(   Previous Start Next ) show
0 407.4 moveto
10 f4
(     _________________________________________________________________) show
0 396.9 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/associative.html -----) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(     _________________________________________________________________) show
0 354.9 moveto
10 f4
(   ) show
0 344.4 moveto
10 f4
(                              ASSOCIATIVE ARRAYS) show
0 333.9 moveto
10 f4
(                                       ) show
0 323.4 moveto
10 f4
(   ) show
0 312.9 moveto
10 f4
(     _________________________________________________________________) show
0 302.4 moveto
10 f4
(   ) show
0 291.9 moveto
10 f4
(   ) show
0 281.4 moveto
10 f4
(   ) show
0 270.9 moveto
10 f4
(   Ordinary list arrays allow us to access their element by number. The) show
0 260.4 moveto
10 f4
(   first element of array @food is $food[0]. The second element is) show
0 249.9 moveto
10 f4
(   $food[1], and so on. But Perl also allows us to create arrays which) show
0 239.4 moveto
10 f4
(   are accessed by string. These are called associative arrays.) show
0 228.9 moveto
10 f4
(   ) show
0 218.4 moveto
10 f4
(   To define an associative array we use the usual parenthesis notation,) show
0 207.9 moveto
10 f4
(   but the array itself is prefixed by a % sign. Suppose we want to) show
0 197.4 moveto
10 f4
(   create an array of people and their ages. It would look like this:) show
0 176.4 moveto
10 f4
(%ages = \("Michael Caine", 39,) show
0 165.9 moveto
10 f4
(         "Dirty Den", 34,) show
0 155.4 moveto
10 f4
(         "Angie", 27,) show
0 144.9 moveto
10 f4
(         "Willy", "21 in dog years",) show
0 134.4 moveto
10 f4
(         "The Queen Mother", 108\);) show
0 113.4 moveto
10 f4
(   Now we can find the age of people with the following expressions) show
0 92.4 moveto
10 f4
($ages{"Michael Caine"};         # Returns 39) show
0 81.9 moveto
10 f4
($ages{"Dirty Den"};             # Returns 34) show
pagelevel restore
showpage
%%Page: 24 24
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
($ages{"Angie"};                 # Returns 27) show
0 701.4 moveto
10 f4
($ages{"Willy"};                 # Returns "21 in dog years") show
0 690.9 moveto
10 f4
($ages{"The Queen Mother"};      # Returns 108) show
0 669.9 moveto
10 f4
(   Notice that like list arrays each % sign has changed to a $ to access) show
0 659.4 moveto
10 f4
(   an individual element because that element is a scalar. Unlike list) show
0 648.9 moveto
10 f4
(   arrays the index \(in this case the person's name\) is enclosed in curly) show
0 638.4 moveto
10 f4
(   braces, the idea being that associative arrays are fancier than list) show
0 627.9 moveto
10 f4
(   arrays.) show
0 617.4 moveto
10 f4
(   ) show
0 606.9 moveto
10 f4
(   An associative array can be converted back into a list array just by) show
0 596.4 moveto
10 f4
(   assigning it to a list array variable. A list array can be converted) show
0 585.9 moveto
10 f4
(   into an associative array by assigning it to an associative array) show
0 575.4 moveto
10 f4
(   variable. Ideally the list array will have an even number of elements:) show
0 554.4 moveto
10 f4
(@info = %ages;          # @info is a list array. It) show
0 543.9 moveto
10 f4
(                        # now has 10 elements) show
0 533.4 moveto
10 f4
($info[5];               # Returns the value 27 from) show
0 522.9 moveto
10 f4
(                        # the list array @info) show
0 512.4 moveto
10 f4
(%moreages = @info;      # %moreages is an associative) show
0 501.9 moveto
10 f4
(                        # array. It is the same as %ages) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(   ) show
0 459.9 moveto
10 f4
(   ) show
0 449.4 moveto
10 f4
(     _________________________________________________________________) show
0 438.9 moveto
10 f4
(   ) show
0 428.4 moveto
10 f4
(Operators) show
0 407.4 moveto
10 f4
(   Associative arrays do not have any order to their elements \(they are) show
0 396.9 moveto
10 f4
(   just like hash tables\) but is it possible to access all the elements) show
0 386.4 moveto
10 f4
(   in turn using the keys function and the values function:) show
0 365.4 moveto
10 f4
(foreach $person \(keys %ages\)) show
0 354.9 moveto
10 f4
({) show
0 344.4 moveto
10 f4
(        print "I know the age of $person\\n";) show
0 333.9 moveto
10 f4
(}) show
0 323.4 moveto
10 f4
(foreach $age \(values %ages\)) show
0 312.9 moveto
10 f4
({) show
0 302.4 moveto
10 f4
(        print "Somebody is $age\\n";) show
0 291.9 moveto
10 f4
(}) show
0 270.9 moveto
10 f4
(   When keys is called it returns a list of the keys \(indices\) of the) show
0 260.4 moveto
10 f4
(   associative array. When values is called it returns a list of the) show
0 249.9 moveto
10 f4
(   values of the array. These functions return their lists in the same) show
0 239.4 moveto
10 f4
(   order, but this order has nothing to do with the order in which the) show
0 228.9 moveto
10 f4
(   elements have been entered.) show
0 218.4 moveto
10 f4
(   ) show
0 207.9 moveto
10 f4
(   When keys and values are called in a scalar context they return the) show
0 197.4 moveto
10 f4
(   number of key/value pairs in the associative array.) show
0 186.9 moveto
10 f4
(   ) show
0 176.4 moveto
10 f4
(   There is also a function each which returns a two element list of a) show
0 165.9 moveto
10 f4
(   key and its value. Every time each is called it returns another) show
0 155.4 moveto
10 f4
(   key/value pair:) show
0 134.4 moveto
10 f4
(while \(\($person, $age\) = each\(%ages\)\)) show
0 123.9 moveto
10 f4
({) show
0 113.4 moveto
10 f4
(        print "$person is $age\\n";) show
0 102.9 moveto
10 f4
(}) show
0 81.9 moveto
10 f4
(   ) show
pagelevel restore
showpage
%%Page: 25 25
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(   ) show
0 701.4 moveto
10 f4
(   ) show
0 690.9 moveto
10 f4
(     _________________________________________________________________) show
0 680.4 moveto
10 f4
(   ) show
0 669.9 moveto
10 f4
(Environment variables) show
0 648.9 moveto
10 f4
(   When you run a perl program, or any script in UNIX, there will be) show
0 638.4 moveto
10 f4
(   certain environment variables set. These will be things like USER) show
0 627.9 moveto
10 f4
(   which contains your username and DISPLAY which specifies which screen) show
0 617.4 moveto
10 f4
(   your graphics will go to. When you run a perl CGI script on the World) show
0 606.9 moveto
10 f4
(   Wide Web there are environment variables which hold other useful) show
0 596.4 moveto
10 f4
(   information. All these variables and their values are stored in the) show
0 585.9 moveto
10 f4
(   associative %ENV array in which the keys are the variable names. Try) show
0 575.4 moveto
10 f4
(   the following in a perl program:) show
0 554.4 moveto
10 f4
(print "You are called $ENV{'USER'} and you are ";) show
0 543.9 moveto
10 f4
(print "using display $ENV{'DISPLAY'}\\n";) show
0 522.9 moveto
10 f4
(   ) show
0 512.4 moveto
10 f4
(   ) show
0 501.9 moveto
10 f4
(   ) show
0 491.4 moveto
10 f4
(     _________________________________________________________________) show
0 480.9 moveto
10 f4
(   ) show
0 470.4 moveto
10 f4
(   Previous Start Next ) show
0 459.9 moveto
10 f4
(     _________________________________________________________________) show
0 449.4 moveto
10 f4
(----- boundary http://agora.leeds.ac.uk/nik/Perl/subroutines.html -----) show
0 428.4 moveto
10 f4
(   ) show
0 417.9 moveto
10 f4
(     _________________________________________________________________) show
0 407.4 moveto
10 f4
(   ) show
0 396.9 moveto
10 f4
(                                  SUBROUTINES) show
0 386.4 moveto
10 f4
(                                       ) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(     _________________________________________________________________) show
0 354.9 moveto
10 f4
(   ) show
0 344.4 moveto
10 f4
(   ) show
0 333.9 moveto
10 f4
(   ) show
0 323.4 moveto
10 f4
(   Like any good programming langauge Perl allows the user to define) show
0 312.9 moveto
10 f4
(   their own functions, called subroutines. They may be placed anywhere) show
0 302.4 moveto
10 f4
(   in your program but it's probably best to put them all at the) show
0 291.9 moveto
10 f4
(   beginning or all at the end. A subroutine has the form) show
0 270.9 moveto
10 f4
(sub mysubroutine) show
0 260.4 moveto
10 f4
({) show
0 249.9 moveto
10 f4
(        print "Not a very interesting routine\\n";) show
0 239.4 moveto
10 f4
(        print "This does the same thing every time\\n";) show
0 228.9 moveto
10 f4
(}) show
0 207.9 moveto
10 f4
(   regardless of any parameters that we may want to pass to it. All of) show
0 197.4 moveto
10 f4
(   the following will work to call this subroutine. Notice that a) show
0 186.9 moveto
10 f4
(   subroutine is called with an & character in front of the name:) show
0 165.9 moveto
10 f4
(&mysubroutine;          # Call the subroutine) show
0 155.4 moveto
10 f4
(&mysubroutine\($_\);      # Call it with a parameter) show
0 144.9 moveto
10 f4
(&mysubroutine\(1+2, $_\); # Call it with two parameters) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(   ) show
0 102.9 moveto
10 f4
(   ) show
0 92.4 moveto
10 f4
(     _________________________________________________________________) show
0 81.9 moveto
10 f4
(   ) show
pagelevel restore
showpage
%%Page: 26 26
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(Parameters) show
0 690.9 moveto
10 f4
(   In the above case the parameters are acceptable but ignored. When the) show
0 680.4 moveto
10 f4
(   subroutine is called any parameters are passed as a list in the) show
0 669.9 moveto
10 f4
(   special @_ list array variable. This variable has absolutely nothing) show
0 659.4 moveto
10 f4
(   to do with the $_ scalar variable. The following subroutine merely) show
0 648.9 moveto
10 f4
(   prints out the list that it was called with. It is followed by a) show
0 638.4 moveto
10 f4
(   couple of examples of its use.) show
0 617.4 moveto
10 f4
(sub printargs) show
0 606.9 moveto
10 f4
({) show
0 596.4 moveto
10 f4
(        print "@_\\n";) show
0 585.9 moveto
10 f4
(}) show
0 564.9 moveto
10 f4
(&printargs\("perly", "king"\);    # Example prints "perly king") show
0 554.4 moveto
10 f4
(&printargs\("frog", "and", "toad"\); # Prints "frog and toad") show
0 533.4 moveto
10 f4
(   Just like any other list array the individual elements of @_ can be) show
0 522.9 moveto
10 f4
(   accessed with the square bracket notation:) show
0 501.9 moveto
10 f4
(sub printfirsttwo) show
0 491.4 moveto
10 f4
({) show
0 480.9 moveto
10 f4
(        print "Your first argument was $_[0]\\n";) show
0 470.4 moveto
10 f4
(        print "and $_[1] was your second\\n";) show
0 459.9 moveto
10 f4
(}) show
0 438.9 moveto
10 f4
(   Again it should be stressed that the indexed scalars $_[0] and $_[1]) show
0 428.4 moveto
10 f4
(   and so on have nothing to with the scalar $_ which can also be used) show
0 417.9 moveto
10 f4
(   without fear of a clash.) show
0 407.4 moveto
10 f4
(   ) show
0 396.9 moveto
10 f4
(   ) show
0 386.4 moveto
10 f4
(     _________________________________________________________________) show
0 375.9 moveto
10 f4
(   ) show
0 365.4 moveto
10 f4
(Returning values) show
0 344.4 moveto
10 f4
(   Result of a subroutine is always the last thing evaluated. This) show
0 333.9 moveto
10 f4
(   subroutine returns the maximum of two input parameters. An example of) show
0 323.4 moveto
10 f4
(   its use follows.) show
0 302.4 moveto
10 f4
(sub maximum) show
0 291.9 moveto
10 f4
({) show
0 281.4 moveto
10 f4
(        if \($_[0] > $_[1]\)) show
0 270.9 moveto
10 f4
(        {) show
0 260.4 moveto
10 f4
(                $_[0];) show
0 249.9 moveto
10 f4
(        }) show
0 239.4 moveto
10 f4
(        else) show
0 228.9 moveto
10 f4
(        {) show
0 218.4 moveto
10 f4
(                $_[1];) show
0 207.9 moveto
10 f4
(        }) show
0 197.4 moveto
10 f4
(}) show
0 176.4 moveto
10 f4
($biggest = &maximise\(37, 24\);   # Now $biggest is 37) show
0 155.4 moveto
10 f4
(   The &printfirsttwo subroutine above also returns a value, in this case) show
0 144.9 moveto
10 f4
(   1. This is because the last thing that subroutine did was a print) show
0 134.4 moveto
10 f4
(   statement and the result of a successful print statement is always 1.) show
0 123.9 moveto
10 f4
(   ) show
0 113.4 moveto
10 f4
(   ) show
0 102.9 moveto
10 f4
(     _________________________________________________________________) show
0 92.4 moveto
10 f4
(   ) show
0 81.9 moveto
10 f4
(Local variables) show
pagelevel restore
showpage
%%Page: 27 27
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 708.9 moveto
10 f4
(   The @_ variable is local to the current subroutine, and so of course) show
0 698.4 moveto
10 f4
(   are $_[0], $_[1], $_[2], and so on. Other variables can be made local) show
0 687.9 moveto
10 f4
(   too, and this is useful if we want to start altering the input) show
0 677.4 moveto
10 f4
(   parameters. The following subroutine tests to see if one string is) show
0 666.9 moveto
10 f4
(   inside another, spaces not withstanding. An example follows.) show
0 645.9 moveto
10 f4
(sub inside) show
0 635.4 moveto
10 f4
({) show
0 624.9 moveto
10 f4
(        local\($a, $b\);                  # Make local variables) show
0 614.4 moveto
10 f4
(        \($a, $b\) = \($_[0], $_[1]\);      # Assign values) show
0 603.9 moveto
10 f4
(        $a =~ s/ //g;                   # Strip spaces from) show
0 593.4 moveto
10 f4
(        $b =~ s/ //g;                   #   local variables) show
0 582.9 moveto
10 f4
(        \($a =~ /$b/ || $b =~ /$a/\);     # Is $b inside $a) show
0 572.4 moveto
10 f4
(                                        #   or $a inside $b?) show
0 561.9 moveto
10 f4
(}) show
0 540.9 moveto
10 f4
(&inside\("lemon", "dole money"\);         # true) show
0 519.9 moveto
10 f4
(   In fact, it can even be tidied up by replacing the first two lines) show
0 509.4 moveto
10 f4
(   with) show
0 488.4 moveto
10 f4
(local\($a, $b\) = \($_[0], $_[1]\);) show
0 467.4 moveto
10 f4
(   ) show
0 456.9 moveto
10 f4
(   ) show
0 446.4 moveto
10 f4
(   ) show
0 435.9 moveto
10 f4
(     _________________________________________________________________) show
0 425.4 moveto
10 f4
(   ) show
0 414.9 moveto
10 f4
(   Previous Start ) show
0 404.4 moveto
10 f4
(     _________________________________________________________________) show
0 393.9 moveto
10 f4
(----- boundary end -----) show
pagelevel restore
showpage
%%EOF

AX register is 1).

The memory attribute of the page containing the affected line has no effect on the behavior of this instruction. It should be noted that processors are free to speculatively fetch and cache data from system memory regions assigned a memory-type allowing for speculative reads (such as, the WB, WC, and WT memory types). PREFETCHh instructions can be used to provide the processor with hints for this speculative behavior. Because this speculative fetching can occur at any time and is not tied to instruction execution, the CLFLUSH instruction is not ordered with respect to PREFETCHh instructions or any of the speculative fetching mechanisms (that is, data can be speculatively loaded into a cache line just before, during, or after the execution of a CLFLUSH instruction that references the cache line).

CLFLUSH is only ordered by the MFENCE instruction. It is not guaranteed to be ordered by any other fencing or serializing instructions or by another CLFLUSH instruction. For example, software can use an MFENCE instruction to ensure that previous stores are included in the write-back.

The CLFLUSH instruction can be used at all privilege levels and is subject to all permission checking and faults associated with a byte load (and in addition, a CLFLUSH instruction is allowed to flush a linear address in an execute-only segment). Like a load, the CLFLUSH instruction sets the A bit but not the D bit in the page tables.

The CLFLUSH instruction was introduced with the SSE2 extensions; however, because it has its own CPUID feature flag, it can be implemented in IA-32 processors that do not include the SSE2 extensions. Also, detecting the presence of the SSE2 extensions with the CPUID instruction does not guarantee that the CLFLUSH instruction is implemented in the processor.

CLFLUSH operation is the same in non-64-bit modes and 64-bit mode.
Pseudo Code

Flush_Cache_Line(SRC);

Exceptions
64-Bit Mode Exceptions
Exception 	Description
#UD 	If CPUID.01H:EDX.CLFSH[bit 19] = 0. If the LOCK prefix is used.
#PF(fault-code) 	For a page fault.
#GP(0) 	If the memory address is in a non-canonical form.
#SS(0) 	If a memory address referencing the SS segment is in a non-canonical form.
Compatibility Mode Exceptions

Same exceptions as in protected mode.
Virtual-8086 Mode Exceptions
Exception 	Description
#PF(fault-code) 	For a page fault.
Same exceptions as in real address mode.
Real-Address Mode Exceptions
Exception 	Description
#UD 	If CPUID.01H:EDX.CLFSH[bit 19] = 0. If the LOCK prefix is used.
#GP 	If any part of the operand lies outside the effective address space from 0 to FFFFH.
Protected Mode Exceptions
Exception 	Description
#UD 	If CPUID.01H:EDX.CLFSH[bit 19] = 0. If the LOCK prefix is used.
#PF(fault-code) 	For a page fault.
#SS(0) 	For an illegal address in the SS segment.
#GP(0) 	For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments. 
che_Line(SRC);

Exceptions
64-Bit Mode Exceptions
Exception 	Description
#UD 	If CPUID.01H:EDX.CLFSH[bit 19] = 0. If the LOCK prefix is used.
#PF(f